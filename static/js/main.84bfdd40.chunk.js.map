{"version":3,"sources":["App.jsx","serviceWorkerRegistration.js","index.js"],"names":["App","React","useState","Data","setData","Value","setValue","getData","location","a","fetch","method","headers","process","res","json","data","status","className","type","placeholder","onChange","e","target","value","onClick","name","main","temp","wind","speed","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sOA+DeA,MA3Df,WACE,MAAwBC,IAAMC,WAA9B,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BH,IAAMC,WAAhC,mBAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACIC,MAAM,+DAAD,OAC0CF,EAD1C,iBAErB,CACEG,OAAQ,MACRC,QAAS,CACP,kBAAmB,4CACnB,iBACAC,wDARQ,cACRC,EADQ,gBAYKA,EAAIC,OAZT,OAYRC,EAZQ,OAaC,MAAfF,EAAIG,QAAkBb,EAAQY,GAbhB,2CAAH,sDAgBb,OACE,sBAAKE,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,uBACEC,KAAK,SACLD,UAAU,QACVE,YAAY,SACZC,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOC,UAErC,wBAAQC,QAAS,kBAAMlB,EAAQF,IAA/B,uBAGF,+BACGF,EACC,oCACE,sBAAKe,UAAU,QAAf,UACE,gDACA,+BAAOf,EAAKuB,UAGd,sBAAKR,UAAU,QAAf,UACE,mDACA,iCAAOf,EAAKwB,KAAKC,KAAjB,eAGF,sBAAKV,UAAU,QAAf,UACE,4CACA,iCAAOf,EAAK0B,KAAKC,MAAjB,iBAIJ,0DC5CJC,EAAcC,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDWnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIhD,yBAAwBoB,OAAOzB,SAASsD,MACpDC,SAAW9B,OAAOzB,SAASuD,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMxB,yBAAN,sBAEPkB,IAgEV,SAAiCM,EAAOC,GAEtC5B,MAAM2B,EAAO,CACXzB,QAAS,CAAE,iBAAkB,YAE5B8B,MAAK,SAACuB,GAEL,IAAMC,EAAcD,EAASrD,QAAQuD,IAAI,gBAEnB,MAApBF,EAAShD,QACO,MAAfiD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAACC,GAClCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOzB,SAAS+D,eAKpBnC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVqB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCpC/BmC,K","file":"static/js/main.84bfdd40.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [Data, setData] = React.useState();\n  const [Value, setValue] = React.useState();\n\n  // Get Data\n  const getData = async (location) => {\n    const res = await fetch(\n      `https://community-open-weather-map.p.rapidapi.com/weather?q=${location}&units=metric`,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n          process.env.REACT_APP_API_KEY,\n        },\n      }\n    );\n    const data = await res.json();\n    res.status === 200 && setData(data);\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <input\n          type=\"search\"\n          className=\"input\"\n          placeholder=\"Search\"\n          onChange={(e) => setValue(e.target.value)}\n        />\n        <button onClick={() => getData(Value)}>Search</button>\n      </header>\n\n      <main>\n        {Data ? (\n          <section>\n            <div className=\"group\">\n              <strong>Location: </strong>\n              <span>{Data.name}</span>\n            </div>\n\n            <div className=\"group\">\n              <strong>Temperature: </strong>\n              <span>{Data.main.temp} &#176;C</span>\n            </div>\n\n            <div className=\"group\">\n              <strong>Wind: </strong>\n              <span>{Data.wind.speed} km/h</span>\n            </div>\n          </section>\n        ) : (\n          <h2>Search by location</h2>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}